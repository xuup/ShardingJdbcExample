spring.main.allow-bean-definition-overriding=true
mybatis.configuration.map-underscore-to-camel-case=true


#数据源名称，多数据源以逗号分隔
spring.shardingsphere.datasource.names= m1, m2 
#配置第一个数据源
spring.shardingsphere.datasource.m1.url= jdbc:mysql://localhost:3306/edu_db_1?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2B8
spring.shardingsphere.datasource.m1.type= com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name= com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m1.username= root
spring.shardingsphere.datasource.m1.password= 123456

#配置第二个数据源
spring.shardingsphere.datasource.m2.url= jdbc:mysql://localhost:3306/edu_db_2?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2B8
spring.shardingsphere.datasource.m2.type= com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m2.driver-class-name= com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m2.username= root
spring.shardingsphere.datasource.m2.password= 123456


#配置数据结点，指定course表的数据分布情况
spring.shardingsphere.sharding.tables.course.actual-data-nodes=m$->{1..2}.course_$->{1..2}


#配置分库策略
spring.shardingsphere.sharding.tables.course.database-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.tables.course.database-strategy.inline.algorithm-expression = m$->{user_id%2 + 1}

# 用于单分片键的标准分片场景
#指定表分片策略 约定cid值偶数添加到course_1表，如果cid是奇数调价到course_2表
spring.shardingsphere.sharding.tables.course.table-strategy.inline.sharding-column= cid
spring.shardingsphere.sharding.tables.course.table-strategy.inline.algorithm-expression= course_$->{cid % 2 + 1}

# 分布式序列策略配置，指定course表的主键生成策略 course表并非真实的表，而是一个逻辑表，真实表为course_1、course_2
spring.shardingsphere.sharding.tables.course.key-generator.column=cid
spring.shardingsphere.sharding.tables.course.key-generator.type=SNOWFLAKE



#打开sql输出日志
spring.shardingsphere.props.sql.show = true


